#pragma once
#include "inttypes.h" 
uint8_t type_sound;
//регистры состояния AY0
uint8_t reg_ay0[16];
uint16_t ay0_R12_R11;
uint8_t ay0_R7_m;// копия регистра смесителя
uint16_t ay0_A_freq;
uint16_t ay0_B_freq;
uint16_t ay0_C_freq;

// регистры состояния AY1
uint8_t reg_ay1[16];
uint16_t ay1_R12_R11;
uint8_t ay1_R7_m; // копия регистра смесителя
uint16_t ay1_A_freq;
uint16_t ay1_B_freq;
uint16_t ay1_C_freq;
// для ямахи нужно маску 0x1f
static const uint8_t maskAY[16] = {0xff,0x0f,0xff,0x0f,0xff,0x0f ,0x1f, 0xff, 0x1f,0x1f,0x1f, 0xff , 0xff, 0x0f,0xff,0xff};




void select_audio(uint8_t num);   
void (*audio_out)(void);

void AY_select_reg(uint8_t N_reg);
uint8_t AY_get_reg();
void AY_set_reg(uint8_t val);

uint16_t*  get_AY_Out(uint8_t delta);
void  AY_reset();

void (*AY_out_FFFD)(uint8_t N_reg);// определение указателя на функцию
void (*AY_out_BFFD)(uint8_t val);  // определение указателя на функцию
 void  AY_reset();
 uint8_t AY_in_FFFD();

 void hardAY_off();
 void hardAY_on();

 void init_vol_ay(uint8_t vol);

uint8_t N_sel_ay;
uint8_t N_sel_reg;
uint8_t N_sel_reg_1;



bool chip_ay;

        bool audio_flag;
//------------------------
//static const uint8_t ampls_AY[16] =
  uint16_t ampls_AY[32];
//{0,1,1,1,2,2,3,5,6,9,13,17,22,29,36,45};/*AY_TABLE*/
//{0,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31};/*Rampa_AY_table*/

static const uint8_t ampls[7][16] =
{
   {0,1,1,1,2,2,3,5,6,9,13,17,22,29,36,45},/*AY_TABLE*/
   {0,1,2,3,4,5,6,8,10,12,16,19,23,28,34,40},/*снятя с китайского чипа*/
   {0,3,5,8,11,13,16,19,21,24,27,29,32,35,37,40},/*линейная*/
   {0,10,15,20,23,27,29,31,32,33,35,36,38,39,40,40},/*выгнутая*/
   {0,1,2,2,3,3,4,6,7,9,12,15,19,25,32,41},/*степенная зависимость*/
   {0,2,4,5,7,8,9,11,12,14,16,19,23,28,34,40},/*гибрид линейной и китайского чипа*/
   {0,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31},/*Rampa_AY_table*/
};
//-------------------------------------------------------------------------------------------------
static const uint8_t Envelopes_const[16][32] =
{
  { 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },/*0*/
  { 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },/*1*/
  { 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },/*2*/
  { 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },/*3*/
  { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },/*4*/
  { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },/*5*/
  { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },/*6*/
  { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },/*7*/
  { 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0 },/*8*/
  { 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },/*9*/
  { 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 }, /*10 0x0a */
  { 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15 },/*11  0x0b */
  { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 },/*12  0x0c*/
  { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15 },/*13  0x0d*/
  { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0 },/*14  0x0e*/
  { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }/*15 0x0d*/
};  

 uint16_t Envelopes[16][32];

//==================================================================================================
//                    0Rsb00IB
//   #define AY_Z     0b01000000 //неактивен 


// all chip AY
#define AY_Z      0b0100110000000000 //неактивны оба чипа
#define AY_RES    0b0000001100000000// reset
// chip AY 1
#define AY1_Z     0b0100010000000000 // 0x4400 активен чип 1
//#define AY1_READ  0b0100010100000000// чтение 
#define AY1_WRITE 0b0100011000000000// запись
#define AY1_FIX   0b0100011100000000// фиксация адреса
//#define AY1_RES   0b0000011100000000// reset

// chip AY 0
#define AY0_Z     0b0100100000000000 // 0x4800 активен чип 0
//#define AY0_READ  0b0100100100000000// чтение 
#define AY0_WRITE 0b0100101000000000// запись
#define AY0_FIX   0b0100101100000000// фиксация адреса
#define AY0_RES   0b0000101100000000// reset

//--------------------------------------------------------------------------------------------------

void Init_AY_595();

bool __not_in_flash_func(get_random)();

void __not_in_flash_func(send595)(uint16_t comand,uint8_t data);
void __not_in_flash_func(send595_0)(uint16_t comand, uint8_t data);
void __not_in_flash_func(send595_1)(uint16_t comand, uint8_t data);
void out_beep595(bool val);

void (*hw_zx_set_save_out)(bool val); // определение указателя на функцию
void (hw_out595_save_out)(bool val);
void (hw_outpin_save_out)(bool val);
void (hw_outi2s_save_out)(bool val);


uint16_t ay595;
uint16_t beep595;
uint8_t beep_data_old;
uint8_t beep_data;
uint16_t beepPWM;


static void gen_env();
static uint8_t EnvelopesSS[16][128] ;



#ifdef WS2812
void music (void);
 #endif



uint8_t Filtr_L(uint8_t data);
uint8_t Filtr_R(uint8_t data);


// i2s tables
static const uint16_t SNDR_VOL_AY_S[32] =
{  0x0000,0x0000,0x0340,0x0340,0x04C0,0x04C0,0x06F2,0x06F2,0x0A44,0x0A44,0x0F13,0x0F13,0x1510,0x1510,0x227E,0x227E,
	0x289F,0x289F,0x414E,0x414E,0x5B21,0x5B21,0x7258,0x7258,0x905E,0x905E,0xB550,0xB550,0xD7A0,0xD7A0,0xFFFF,0xFFFF  };

static const uint16_t SNDR_VOL_YM_S[32] =
{  0x0000,0x0000,0x00EF,0x01D0,0x0290,0x032A,0x03EE,0x04D2,0x0611,0x0782,0x0912,0x0A36,0x0C31,0x0EB6,0x1130,0x13A0,
	0x1751,0x1BF5,0x20E2,0x2594,0x2CA1,0x357F,0x3E45,0x475E,0x5502,0x6620,0x7730,0x8844,0xA1D2,0xC102,0xE0A2,0xFFFF  };

  static int SoftSpec48_AY_table [16] = {
     0, 655, 917, 1376, 2032, 3015, 4194, 7012,
     8323, 13435, 19136, 24445, 32309, 41615, 52821, 65535
 };
